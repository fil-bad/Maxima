/* [wxMaxima: section start ]
Procedure 1/10/19
   [wxMaxima: section end   ] */


alias(s,sin,c,cos)$

Rx(alpha):=matrix(
    [1,0,0],
    [0,c(alpha),-s(alpha)],
    [0,s(alpha),c(alpha)]
)$

Ry(beta):=matrix(
    [c(beta),0,s(beta)],
    [0,1,0],
    [-s(beta),0,c(beta)]
)$

Rz(gamma):=matrix(
    [c(gamma),-s(gamma),0],
    [s(gamma),c(gamma),0],
    [0,0,1]
)$

print("Rx(α)=",Rx(alpha),", Ry(β)=",Ry(beta),", Rz(γ)=",Rz(gamma))$

Rxyz(alpha,beta,gamma):=Rx(alpha).Ry(beta).Rz(gamma)$

Rxzy(alpha,beta,gamma):=Rx(alpha).Ry(beta).Rz(gamma)$

Ryxz(alpha,beta,gamma):=Ry(alpha).Rx(beta).Rz(gamma)$

Ryzx(alpha,beta,gamma):=Ry(alpha).Rz(beta).Rx(gamma)$

Rzxy(alpha,beta,gamma):=Rz(alpha).Rx(beta).Ry(gamma)$

Rzyx(alpha,beta,gamma):=Rz(alpha).Ry(beta).Rx(gamma)$

/* [wxMaxima: section start ]
Procedura 3/10/19
   [wxMaxima: section end   ] */


normaVet(v):=(((v[1])^2+(v[2])^2+(v[3])^2)^(1/2))[1]$

vNorm(v):=(1/normaVet(v))*v$ 

S(omega_x,omega_y,omega_z):=block(
    1/normaVet(transpose([omega_x,omega_y,omega_z]))*matrix(
    [0,-omega_z,omega_y],
    [omega_z,0,-omega_x],
    [-omega_y,omega_x,0]
    ) 
)$
R(v,theta):=block(
    II:diagmatrix(3,1),
    vn:vNorm(v),
    Sversore:S(vn[1,1],vn[2,1],vn[3,1]),
    A:s*II-Sversore,
    A1:invert(A),
    theta:theta*normaVet(v),
    A2:matrix(
        [ilt(A1[1,1],s,theta),ilt(A1[1,2],s,theta),ilt(A1[1,3],s,theta)],
        [ilt(A1[2,1],s,theta),ilt(A1[2,2],s,theta),ilt(A1[2,3],s,theta)],
        [ilt(A1[3,1],s,theta),ilt(A1[3,2],s,theta),ilt(A1[3,3],s,theta)]
        )
)$


